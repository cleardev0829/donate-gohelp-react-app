{"version":3,"sources":["components/HeaderBreadcrumbs.js","components/_dashboard/user/setting/AccountTimeZoneCard.js","components/_dashboard/user/setting/AccountCurrencyCard.js","components/_dashboard/user/setting/AccountTagEditDialog.js","components/_dashboard/user/setting/AccountTagsTable.js","components/_dashboard/user/setting/AccountTags.js","components/_dashboard/user/setting/AccountThemeSettingMode.js","components/_dashboard/user/setting/AccountThemeSettingColor.js","components/_dashboard/user/setting/AccountThemeSetting.js","components/_dashboard/user/setting/AccountMisc.js","components/_dashboard/user/setting/AccountEditDialog.js","components/_dashboard/user/setting/AccountAdjustmentEditDialog.js","components/_dashboard/user/setting/AccountAdjustmentTable.js","components/_dashboard/user/setting/AccountAdjustmentDialog.js","components/_dashboard/user/setting/AccountTable.js","components/_dashboard/user/setting/AccountGeneral.js","components/_dashboard/user/setting/AccountImportsTable.js","components/_dashboard/user/setting/AccountTrades.js","components/_dashboard/user/setting/AccountAPIEditDialog.js","components/_dashboard/user/setting/AccountAPIsTable.js","components/_dashboard/user/setting/AccountAPI.js","pages/dashboard/UserSetting.js"],"names":["HeaderBreadcrumbs","links","action","heading","moreLink","sx","other","mb","spacing","direction","alignItems","flexGrow","variant","gutterBottom","flexShrink","isString","href","target","map","noWrap","display","AccountTimeZoneCard","data","dispatch","useDispatch","enqueueSnackbar","useSnackbar","user","useAuth","formik","useFormik","enableReinitialize","initialValues","timezone","onSubmit","values","a","fb_UpdateTimezoneOfUserById","id","getProfile","console","log","timeZones","moment","tz","names","offsetTmz","i","push","format","isSubmitting","handleSubmit","getFieldProps","Card","p","value","autoComplete","noValidate","Grid","container","item","xs","Stack","md","TextField","select","fullWidth","label","placeholder","SelectProps","native","option","Box","mt","justifyContent","LoadingButton","type","loading","currency","fb_UpdateCurrencyOfUserById","AccountTagEditDialog","open","onCancel","index","UserAccountSchema","Yup","shape","tag","required","validationSchema","setSubmitting","resetForm","fb_UpdateTagsOfUserById","errors","touched","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","error","Boolean","helperText","AccountTagsTable","myProfile","useSelector","state","tags","React","useState","editData","setState","onDelete","fb_DeleteTagsOfUserById","uid","CardHeader","title","Scrollbar","TableContainer","minWidth","Table","TableHead","TableRow","TableCell","TableBody","row","order","align","IconButton","onClick","onEdit","width","height","length","AccountGeneral","fb_AddTagsOfUserById","PropTypes","bool","func","object","onSave","AccountThemeSettingMode","useSettings","themeMode","onChangeMode","RadioGroup","name","onChange","e","dir","mode","Paper","zIndex","overflow","position","bgcolor","boxShadow","theme","customShadows","z12","CardActionArea","color","py","icon","sunFill","moonFill","FormControlLabel","control","Radio","top","margin","AccountThemeSettingColor","themeColor","onChangeColor","colorOption","colorName","colorValue","isSelected","alpha","border","borderRadius","transform","transition","transitions","create","easing","easeInOut","duration","shorter","AccountThemeSettings","pt","px","pb","Typography","AccountMisc","AccountEditDialog","number","balance","description","fb_UpdateAccountsOfUserByIndex","getAccountsOfUser","AccountAdjustmentEditDialog","adjustmentId","credit_debit","amount","transaction_dt","fb_UpdateAccountAdjustmentOfUserByIndex","AccountAdjustmentTable","accounts","adjustments","adjustment","adjustmentOpen","accountId","deleteLoading","fb_DeleteAdjustmentOfUserByIdAndIndex","created_dt","Tooltip","disabled","useStyles","makeStyles","appBar","marginLeft","flex","Transition","forwardRef","props","ref","Slide","AccountAdjustmentDialog","classes","handleCancel","fb_AddAccountAdjustmentByUserId","fullScreen","TransitionComponent","AppBar","className","Toolbar","Button","autoFocus","edge","aria-label","Container","maxWidth","AccountTable","deleteIndex","setOpen","closeConfirmModal","fb_DeleteAccountOfUserByIndex","getBalance","parseInt","openConfirmModal","aria-describedby","DialogContentText","DialogActions","subscription","addFlag","setAddFlag","useEffect","Object","entries","plan","nickname","fb_AddAccountByUserId","AccountImportsTable","alert","deleteFill","Account","confirmDialog","setConfirmDialog","selectionRange","startDate","Date","endDate","key","style","ranges","selection","AccountAPIEditDialog","account","model","fb_UpdateAPIsOfUserById","getAPIsOfUser","AccountAPIsTable","api","editFill","fb_AddAPIByUserId","UserSetting","currentTab","setCurrentTab","getSubscription","ACCOUNT_TABS","roundAccountBox","component","roundReceipt","roundVpnKey","shareFill","Page","PATH_DASHBOARD","root","Tabs","scrollButtons","allowScrollButtonsMobile","event","newValue","tab","Tab","disableRipple","capitalCase"],"mappings":"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","file":"static/js/27.384172f7.chunk.js","sourcesContent":["import { isString } from \"lodash\";\r\nimport PropTypes from \"prop-types\";\r\n// material\r\nimport { Box, Typography, Link, Stack } from \"@material-ui/core\";\r\n//\r\nimport { MBreadcrumbs } from \"./@material-extend\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nHeaderBreadcrumbs.propTypes = {\r\n  links: PropTypes.array,\r\n  action: PropTypes.node,\r\n  heading: PropTypes.string.isRequired,\r\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  sx: PropTypes.object,\r\n};\r\n\r\nexport default function HeaderBreadcrumbs({\r\n  links,\r\n  action,\r\n  heading,\r\n  moreLink = \"\" || [],\r\n  sx,\r\n  ...other\r\n}) {\r\n  return (\r\n    <Stack sx={sx} mb={5} spacing={2}>\r\n      <Stack direction=\"row\" alignItems=\"center\">\r\n        <Box sx={{ flexGrow: 1 }}>\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            {heading}\r\n          </Typography>\r\n          <MBreadcrumbs links={links} {...other} />\r\n        </Box>\r\n\r\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\r\n      </Stack>\r\n\r\n      {isString(moreLink) ? (\r\n        <Link href={moreLink} target=\"_blank\" variant=\"body2\">\r\n          {moreLink}\r\n        </Link>\r\n      ) : (\r\n        moreLink.map((href) => (\r\n          <Link\r\n            noWrap\r\n            key={href}\r\n            href={href}\r\n            variant=\"body2\"\r\n            target=\"_blank\"\r\n            sx={{ display: \"flex\" }}\r\n          >\r\n            {href}\r\n          </Link>\r\n        ))\r\n      )}\r\n    </Stack>\r\n  );\r\n}\r\n","import { useSnackbar } from \"notistack\";\r\nimport React from \"react\";\r\nimport { Form, FormikProvider, useFormik } from \"formik\";\r\nimport moment from \"moment-timezone\";\r\n\r\n// material\r\nimport {\r\n    Box,\r\n    Grid,\r\n    Card,\r\n    Stack,\r\n    TextField,\r\n} from \"@material-ui/core\";\r\nimport { LoadingButton } from \"@material-ui/lab\";\r\n\r\n//utils\r\nimport { fb_UpdateTimezoneOfUserById } from \"../../../../utils/firebaseRequest\";\r\n\r\n// hooks\r\nimport useAuth from \"../../../../hooks/useAuth\";\r\n\r\n//redux\r\nimport { useDispatch } from \"../../../../redux/store\";\r\nimport { getProfile } from \"../../../../redux/slices/user\"\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AccountTimeZoneCard({ data }) {\r\n    const dispatch = useDispatch();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const { user } = useAuth();\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            timezone: data,\r\n        },\r\n\r\n        onSubmit: async (values) => {\r\n            try {\r\n                await fb_UpdateTimezoneOfUserById(user.id, values.timezone);\r\n                dispatch(getProfile(user.id));\r\n                enqueueSnackbar(\"Update success\", { variant: \"success\" });\r\n            } catch (error) {\r\n                console.log(error)\r\n                enqueueSnackbar(\"Update failed\", { variant: \"error\" });\r\n            }\r\n        },\r\n    });\r\n\r\n    var timeZones = moment.tz.names();\r\n    var offsetTmz = [];\r\n\r\n    for (var i in timeZones) {\r\n        offsetTmz.push(\r\n            timeZones[i] + \" (GMT\" + moment.tz(timeZones[i]).format(\"Z\") + \") \"\r\n        );\r\n    }\r\n\r\n    const {\r\n        isSubmitting,\r\n        handleSubmit,\r\n        getFieldProps,\r\n    } = formik;\r\n\r\n    return (\r\n        <Card sx={{ p: 3 }}>\r\n            <FormikProvider value={formik}>\r\n                <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <Stack spacing={{ xs: 2, md: 3 }}>\r\n                                <TextField\r\n                                    select\r\n                                    fullWidth\r\n                                    label=\"Timezone\"\r\n                                    placeholder=\"Timezone\"\r\n                                    {...getFieldProps(\"timezone\")}\r\n                                    SelectProps={{ native: true }}\r\n                                >\r\n                                    <option value=\"\" />\r\n                                    {offsetTmz.map((option) => (\r\n                                        <option key={option} value={option}>\r\n                                            {option}\r\n                                        </option>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Stack>\r\n\r\n                            <Box\r\n                                sx={{ mt: 3, display: \"flex\", justifyContent: \"flex-end\" }}\r\n                            >\r\n                                <LoadingButton\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    loading={isSubmitting}\r\n                                >\r\n                                    Save Timezone\r\n                                </LoadingButton>\r\n                            </Box>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Form>\r\n            </FormikProvider>\r\n        </Card>\r\n    );\r\n}\r\n","import { useSnackbar } from \"notistack\";\r\nimport React from \"react\";\r\nimport { Form, FormikProvider, useFormik } from \"formik\";\r\n\r\n// material\r\nimport {\r\n    Box,\r\n    Grid,\r\n    Card,\r\n    Stack,\r\n    TextField,\r\n} from \"@material-ui/core\";\r\nimport { LoadingButton } from \"@material-ui/lab\";\r\n\r\n//utils\r\nimport { fb_UpdateCurrencyOfUserById } from \"../../../../utils/firebaseRequest\";\r\n\r\n// hooks\r\nimport useAuth from \"../../../../hooks/useAuth\";\r\n\r\n//redux\r\nimport { useDispatch } from \"../../../../redux/store\";\r\nimport { getProfile } from \"../../../../redux/slices/user\"\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AccountTimeZoneCard({ data }) {\r\n    const dispatch = useDispatch();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const { user } = useAuth();\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            currency: data,\r\n        },\r\n\r\n        onSubmit: async (values) => {\r\n            try {\r\n                await fb_UpdateCurrencyOfUserById(user.id, values.currency);\r\n                dispatch(getProfile(user.id));\r\n                enqueueSnackbar(\"Update success\", { variant: \"success\" });\r\n            } catch (error) {\r\n                console.log(error);\r\n                enqueueSnackbar(\"Update failed\", { variant: \"error\" });\r\n            }\r\n        },\r\n    });\r\n\r\n    const {\r\n        isSubmitting,\r\n        handleSubmit,\r\n        getFieldProps,\r\n    } = formik;\r\n\r\n    return (\r\n        <Card sx={{ p: 3 }}>\r\n            <FormikProvider value={formik}>\r\n                <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <Stack spacing={{ xs: 2, md: 3 }}>\r\n                                <TextField\r\n                                    select\r\n                                    fullWidth\r\n                                    label=\"Currency\"\r\n                                    placeholder=\"Currency\"\r\n                                    {...getFieldProps(\"currency\")}\r\n                                    SelectProps={{ native: true }}\r\n                                >\r\n                                    <option value=\"\" />\r\n                                    <option value=\"USD\">USD($)</option>\r\n                                    <option value=\"Euro\">Euro(€)</option>\r\n                                    <option value=\"GBP\">GBP(£)</option>\r\n                                </TextField>\r\n                            </Stack>\r\n\r\n                            <Box\r\n                                sx={{ mt: 3, display: \"flex\", justifyContent: \"flex-end\" }}\r\n                            >\r\n                                <LoadingButton\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    loading={isSubmitting}\r\n                                >\r\n                                    Save Timezone\r\n                                </LoadingButton>\r\n                            </Box>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Form>\r\n            </FormikProvider>\r\n        </Card>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport * as Yup from \"yup\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport {\r\n    Box,\r\n    Stack,\r\n    TextField,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Button\r\n} from \"@material-ui/core\";\r\nimport PropTypes from 'prop-types';\r\nimport { Form, FormikProvider, useFormik } from \"formik\";\r\nimport { LoadingButton } from \"@material-ui/lab\";\r\n\r\n// hooks\r\nimport useAuth from \"../../../../hooks/useAuth\";\r\n\r\n//redux\r\nimport { useDispatch } from \"../../../../redux/store\";\r\nimport { getProfile } from \"../../../../redux/slices/user\"\r\n\r\n//utils\r\nimport { fb_UpdateTagsOfUserById } from \"../../../../utils/firebaseRequest\";\r\n\r\nAccountTagEditDialog.PropTypes = {\r\n    open: PropTypes.bool,\r\n    onCancel: PropTypes.func,\r\n    data: PropTypes.object,\r\n    onSave: PropTypes.func\r\n}\r\n\r\nexport default function AccountTagEditDialog({ open, onCancel, data, index }) {\r\n    const { user } = useAuth();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const dispatch = useDispatch();\r\n\r\n    const UserAccountSchema = Yup.object().shape({\r\n        tag: Yup.string().required(\"Tag is required\")\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            tag: data.tag\r\n        },\r\n\r\n        validationSchema: UserAccountSchema,\r\n        onSubmit: async (values, { setSubmitting, resetForm }) => {\r\n            try {\r\n                await fb_UpdateTagsOfUserById(user.id, values, index);\r\n                dispatch(getProfile(user.id));\r\n                setSubmitting(false);\r\n                onCancel();\r\n                resetForm();\r\n                enqueueSnackbar(\"Updated Tag successfully!\", { variant: \"success\" });\r\n            } catch (error) {\r\n                enqueueSnackbar(\"Failed in updating new Tag\", { variant: \"error\" });\r\n            }\r\n        },\r\n    });\r\n\r\n    const {\r\n        errors,\r\n        touched,\r\n        isSubmitting,\r\n        handleSubmit,\r\n        getFieldProps,\r\n    } = formik;\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onCancel} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">Subscribe</DialogTitle>\r\n            <DialogContent>\r\n                <FormikProvider value={formik}>\r\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n                        <Stack spacing={{ xs: 2, md: 3 }}>\r\n                            <TextField\r\n                                fullWidth\r\n                                label=\"Tag\"\r\n                                placeholder=\"Tag\"\r\n                                {...getFieldProps(\"tag\")}\r\n                                error={Boolean(touched.tag && errors.tag)}\r\n                                helperText={touched.tag && errors.tag}\r\n                            />\r\n                        </Stack>\r\n                        <Box\r\n                            sx={{ mt: 3, display: \"flex\", justifyContent: \"flex-end\", spacing: 3 }}\r\n                        >\r\n                            <LoadingButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                loading={isSubmitting}\r\n                            >\r\n                                Update Tag\r\n                            </LoadingButton>\r\n                        </Box>\r\n                    </Form>\r\n                </FormikProvider>\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}","import React from \"react\";\r\nimport { Icon } from '@iconify/react';\r\n// material\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {\r\n    Card,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    CardHeader,\r\n    TableContainer,\r\n    IconButton\r\n} from '@material-ui/core';\r\n\r\n//redux\r\nimport { useDispatch, useSelector } from \"../../../../redux/store\";\r\nimport { getProfile } from \"../../../../redux/slices/user\"\r\n\r\nimport Scrollbar from '../../../Scrollbar';\r\n\r\nimport AccountTagEditDialog from \"./AccountTagEditDialog\";\r\n\r\nimport { fb_DeleteTagsOfUserById } from \"../../../../utils/firebaseRequest\";\r\n\r\nexport default function AccountTagsTable() {\r\n    const dispatch = useDispatch();\r\n    const { myProfile } = useSelector((state) => state.user);\r\n    const tags = myProfile.tags ? myProfile.tags : [];\r\n    const [state, setState] = React.useState({\r\n        open: false,\r\n        editData: false,\r\n        index: null\r\n    })\r\n\r\n    const onEdit = (index) => {\r\n        setState({ ...state, index, open: true, editData: tags[index] })\r\n    }\r\n\r\n    const onCancelEdit = () => {\r\n        setState({ ...state, index: null, open: false, editData: {} })\r\n    }\r\n\r\n    const onDelete = async (index) => {\r\n        await fb_DeleteTagsOfUserById(myProfile.uid, index);\r\n        dispatch(getProfile(myProfile.uid));\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <AccountTagEditDialog open={state.open} index={state.index} onCancel={onCancelEdit} data={state.editData} />\r\n            <CardHeader title=\"Accouts\" sx={{ mb: 3 }} />\r\n            <Scrollbar>\r\n                <TableContainer sx={{ minWidth: 720 }}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Tag</TableCell>\r\n                                <TableCell>Orders</TableCell>\r\n                                <TableCell />\r\n                                <TableCell />\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {tags.map((row, index) => (\r\n                                <TableRow key={index}>\r\n                                    <TableCell>{row.tag ? row.tag : \"No data\"}</TableCell>\r\n                                    <TableCell>{row.order ? row.order : \"No data\"}</TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        <IconButton onClick={() => onEdit(index)}>\r\n                                            <EditIcon width={20} height={20} />\r\n                                        </IconButton>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\" >\r\n                                        <IconButton onClick={() => onDelete(index)}>\r\n                                            <DeleteIcon width={20} height={20} />\r\n                                        </IconButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                            {tags.length == 0 && <TableRow><TableCell></TableCell><TableCell>No Item</TableCell></TableRow>}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Scrollbar>\r\n        </Card>\r\n    );\r\n}\r\n","import * as Yup from \"yup\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React from \"react\";\r\nimport { Form, FormikProvider, useFormik } from \"formik\";\r\n\r\n// material\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Card,\r\n  Stack,\r\n  TextField\r\n} from \"@material-ui/core\";\r\nimport { LoadingButton } from \"@material-ui/lab\";\r\n\r\n// hooks\r\nimport useAuth from \"../../../../hooks/useAuth\";\r\n\r\n//redux\r\nimport { useDispatch } from \"../../../../redux/store\";\r\nimport { getProfile } from \"../../../../redux/slices/user\"\r\n\r\n//utils\r\nimport { fb_AddTagsOfUserById } from \"../../../../utils/firebaseRequest\";\r\n\r\nimport AccountTagsTable from \"./AccountTagsTable\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AccountGeneral() {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const { user } = useAuth();\r\n  const dispatch = useDispatch();\r\n\r\n  const UserAccountSchema = Yup.object().shape({\r\n    tag: Yup.string().required(\"Tag is required\")\r\n  });\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      tag: \"\"\r\n    },\r\n\r\n    validationSchema: UserAccountSchema,\r\n    onSubmit: async (values, { setSubmitting, resetForm }) => {\r\n      try {\r\n        await fb_AddTagsOfUserById(user.id, values);\r\n        dispatch(getProfile(user.id));\r\n        setSubmitting(false);\r\n        resetForm();\r\n        enqueueSnackbar(\"Added Tag successfully!\", { variant: \"success\" });\r\n      } catch (error) {\r\n        enqueueSnackbar(\"Failed in addding new Tag\", { variant: \"error\" });\r\n      }\r\n    },\r\n  });\r\n\r\n  const {\r\n    errors,\r\n    touched,\r\n    isSubmitting,\r\n    handleSubmit,\r\n    getFieldProps,\r\n  } = formik;\r\n\r\n  return (\r\n    <Grid item xs={12}>\r\n      <FormikProvider value={formik}>\r\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n          <Card sx={{ p: 3 }}>\r\n            <Stack spacing={{ xs: 2, md: 3 }}>\r\n              <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Tag\"\r\n                  placeholder=\"Tag\"\r\n                  {...getFieldProps(\"tag\")}\r\n                  error={Boolean(touched.tag && errors.tag)}\r\n                  helperText={touched.tag && errors.tag}\r\n                />\r\n              </Stack>\r\n            </Stack>\r\n            <Box\r\n              sx={{ mt: 3, display: \"flex\", justifyContent: \"flex-end\" }}\r\n            >\r\n              <LoadingButton\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                loading={isSubmitting}\r\n              >\r\n                Add Tag\r\n              </LoadingButton>\r\n            </Box>\r\n          </Card>\r\n        </Form>\r\n      </FormikProvider>\r\n      <br />\r\n      <AccountTagsTable />\r\n    </Grid>\r\n  );\r\n}","import { Icon } from '@iconify/react';\r\nimport moonFill from '@iconify/icons-eva/moon-fill';\r\nimport sunFill from '@iconify/icons-eva/sun-fill';\r\n// material\r\nimport { Box, Grid, Radio, Paper, RadioGroup, CardActionArea, FormControlLabel } from '@material-ui/core';\r\n// hooks\r\nimport useSettings from '../../../../hooks/useSettings';\r\n\r\n//redux\r\nimport { useSelector } from \"../../../../redux/store\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AccountThemeSettingMode() {\r\n  const { themeMode, onChangeMode } = useSettings();\r\n  const { myProfile } = useSelector((state) => state.user);\r\n\r\n  return (\r\n    <RadioGroup name=\"themeMode\" value={themeMode} onChange={(e) => onChangeMode(myProfile.uid, e)}>\r\n      <Grid container spacing={2.5} dir=\"ltr\">\r\n        {['light', 'dark'].map((mode, index) => (\r\n          <Grid item xs={6} key={mode}>\r\n            <Paper\r\n              sx={{\r\n                width: 1,\r\n                zIndex: 0,\r\n                overflow: 'hidden',\r\n                position: 'relative',\r\n                bgcolor: mode === 'dark' ? 'grey.900' : 'common.white',\r\n                ...(themeMode === mode && {\r\n                  boxShadow: (theme) => theme.customShadows.z12\r\n                })\r\n              }}\r\n            >\r\n              <CardActionArea sx={{ color: 'primary.main' }}>\r\n                <Box\r\n                  sx={{\r\n                    py: 4,\r\n                    display: 'flex',\r\n                    color: 'text.disabled',\r\n                    justifyContent: 'center',\r\n                    ...(themeMode === mode && {\r\n                      color: 'primary.main'\r\n                    })\r\n                  }}\r\n                >\r\n                  <Icon icon={index === 0 ? sunFill : moonFill} width={24} height={24} />\r\n                </Box>\r\n\r\n                <FormControlLabel\r\n                  label=\"\"\r\n                  value={mode}\r\n                  control={<Radio sx={{ display: 'none' }} />}\r\n                  sx={{\r\n                    top: 0,\r\n                    margin: 0,\r\n                    width: '100%',\r\n                    height: '100%',\r\n                    position: 'absolute'\r\n                  }}\r\n                />\r\n              </CardActionArea>\r\n            </Paper>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </RadioGroup>\r\n  );\r\n}\r\n","import { alpha } from '@material-ui/core/styles';\r\nimport { Box, Grid, Paper, Radio, RadioGroup, CardActionArea, FormControlLabel } from '@material-ui/core';\r\n// hooks\r\nimport useSettings from '../../../../hooks/useSettings';\r\n\r\n//redux\r\nimport { useSelector } from \"../../../../redux/store\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AccountThemeSettingColor() {\r\n  const { themeColor, onChangeColor, colorOption } = useSettings();\r\n  const { myProfile } = useSelector((state) => state.user);\r\n\r\n  return (\r\n    <RadioGroup name=\"themeColor\" value={themeColor} onChange={(e) => onChangeColor(myProfile.uid, e)}>\r\n      <Grid container spacing={1.5} dir=\"ltr\">\r\n        {colorOption.map((color) => {\r\n          const colorName = color.name;\r\n          const colorValue = color.value;\r\n          const isSelected = themeColor === colorName;\r\n\r\n          return (\r\n            <Grid item xs={4} key={colorName}>\r\n              <Paper\r\n                variant={isSelected ? 'elevation' : 'outlined'}\r\n                sx={{\r\n                  ...(isSelected && {\r\n                    bgcolor: alpha(colorValue, 0.12),\r\n                    border: `solid 2px ${colorValue}`,\r\n                    boxShadow: `inset 0 4px 8px 0 ${alpha(colorValue, 0.24)}`\r\n                  })\r\n                }}\r\n              >\r\n                <CardActionArea sx={{ borderRadius: 1, color: colorValue }}>\r\n                  <Box\r\n                    sx={{\r\n                      height: 48,\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center'\r\n                    }}\r\n                  >\r\n                    <Box\r\n                      sx={{\r\n                        width: 24,\r\n                        height: 14,\r\n                        borderRadius: '50%',\r\n                        bgcolor: colorValue,\r\n                        transform: 'rotate(-45deg)',\r\n                        transition: (theme) =>\r\n                          theme.transitions.create('all', {\r\n                            easing: theme.transitions.easing.easeInOut,\r\n                            duration: theme.transitions.duration.shorter\r\n                          }),\r\n                        ...(isSelected && { transform: 'none' })\r\n                      }}\r\n                    />\r\n                  </Box>\r\n\r\n                  <FormControlLabel\r\n                    label=\"\"\r\n                    value={colorName}\r\n                    control={<Radio sx={{ display: 'none' }} />}\r\n                    sx={{\r\n                      top: 0,\r\n                      margin: 0,\r\n                      width: '100%',\r\n                      height: '100%',\r\n                      position: 'absolute'\r\n                    }}\r\n                  />\r\n                </CardActionArea>\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </RadioGroup>\r\n  );\r\n}\r\n","import {\r\n    Typography,\r\n    Stack,\r\n    Card\r\n} from \"@material-ui/core\";\r\n\r\nimport AccountThemeSettingMode from \"./AccountThemeSettingMode\";\r\nimport AccountThemeSettingColor from \"./AccountThemeSettingColor\";\r\n\r\n// ----------------------------------------------------------------------\r\nexport default function AccountThemeSettings() {\r\n    return (\r\n        <Card>\r\n            <Stack spacing={4} sx={{ pt: 3, px: 3, pb: 15 }}>\r\n                <Stack spacing={1.5}>\r\n                    <Typography variant=\"subtitle2\">Mode</Typography>\r\n                    <AccountThemeSettingMode />\r\n                </Stack>\r\n\r\n                <Stack spacing={1.5}>\r\n                    <Typography variant=\"subtitle2\">Color</Typography>\r\n                    <AccountThemeSettingColor />\r\n                </Stack>\r\n            </Stack>\r\n        </Card>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\n// material\r\nimport {\r\n  Grid,\r\n} from \"@material-ui/core\";\r\n\r\n//redux\r\nimport { useSelector } from \"../../../../redux/store\";\r\n\r\nimport AccountTimeZoneCard from \"./AccountTimeZoneCard\";\r\nimport AccountCurrencyCard from \"./AccountCurrencyCard\";\r\nimport AccountTags from \"./AccountTags\";\r\nimport AccountThemeSetting from \"./AccountThemeSetting\"\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AccountMisc() {\r\n  const { myProfile } = useSelector((state) => state.user);\r\n  return (\r\n    <>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={6}>\r\n          <AccountTimeZoneCard data={myProfile.timezone ? myProfile.timezone : \"\"} />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <AccountCurrencyCard data={myProfile.currency ? myProfile.currency : \"\"} />\r\n        </Grid>\r\n        <Grid item xs={12} md={12}>\r\n          <AccountThemeSetting />\r\n        </Grid>\r\n        <Grid item xs={12} md={12}>\r\n          <AccountTags data={myProfile.tags ? myProfile.tags : []} />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport * as Yup from \"yup\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport {\r\n    Box,\r\n    Stack,\r\n    TextField,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Button\r\n} from \"@material-ui/core\";\r\nimport PropTypes from 'prop-types';\r\nimport { Form, FormikProvider, useFormik } from \"formik\";\r\nimport { LoadingButton } from \"@material-ui/lab\";\r\n\r\n// hooks\r\nimport useAuth from \"../../../../hooks/useAuth\";\r\n\r\n//redux\r\nimport { useDispatch } from \"../../../../redux/store\";\r\nimport { getAccountsOfUser } from \"../../../../redux/slices/user\"\r\n\r\n//utils\r\nimport { fb_UpdateAccountsOfUserByIndex } from \"../../../../utils/firebaseRequest\";\r\n\r\nAccountEditDialog.PropTypes = {\r\n    open: PropTypes.bool,\r\n    onCancel: PropTypes.func,\r\n    data: PropTypes.object,\r\n    onSave: PropTypes.func\r\n}\r\n\r\nexport default function AccountEditDialog({ open, onCancel, data, index }) {\r\n    const { user } = useAuth();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const dispatch = useDispatch();\r\n\r\n    const UserAccountSchema = Yup.object().shape({\r\n        number: Yup.number().required(\"Account Number is required\"),\r\n        balance: Yup.number().required(\"Initial Balance is required\"),\r\n        description: Yup.string().required(\"Description is required\"),\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            number: data.number ? data.number : \"\",\r\n            balance: data.balance ? data.balance : \"\",\r\n            description: data.description ? data.description : \"\"\r\n        },\r\n\r\n        validationSchema: UserAccountSchema,\r\n        onSubmit: async (values, { resetForm, setSubmitting }) => {\r\n            try {\r\n                data = {\r\n                    ...data,\r\n                    number: values.number,\r\n                    balance: values.balance,\r\n                    description: values.description,\r\n                }\r\n                await fb_UpdateAccountsOfUserByIndex(user.id, index, data);\r\n                dispatch(getAccountsOfUser(user.id));\r\n                resetForm();\r\n                setSubmitting(false);\r\n                onCancel()\r\n                enqueueSnackbar(\"Updated account successfully!\", { variant: \"success\" });\r\n            } catch (error) {\r\n                console.log(error);\r\n                enqueueSnackbar(\"Failed in updating account\", { variant: \"error\" });\r\n            }\r\n        },\r\n    });\r\n\r\n    const {\r\n        errors,\r\n        touched,\r\n        isSubmitting,\r\n        handleSubmit,\r\n        getFieldProps,\r\n    } = formik;\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onCancel} aria-labelledby=\"form-dialog-title\">\r\n            <DialogContent>\r\n                <FormikProvider value={formik}>\r\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n                        <Stack spacing={{ xs: 2, md: 3 }}>\r\n                            <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Account Number\"\r\n                                    placeholder=\"Account Number\"\r\n                                    {...getFieldProps(\"number\")}\r\n                                    error={Boolean(touched.number && errors.number)}\r\n                                    helperText={touched.number && errors.number}\r\n                                />\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Initial Balance($)\"\r\n                                    placeholder=\"Initial Balance($)\"\r\n                                    {...getFieldProps(\"balance\")}\r\n                                    error={Boolean(touched.balance && errors.balance)}\r\n                                    helperText={touched.balance && errors.balance}\r\n                                />\r\n                            </Stack>\r\n                            <Stack>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Description\"\r\n                                    placeholder=\"Description\"\r\n                                    {...getFieldProps(\"description\")}\r\n                                    error={Boolean(touched.description && errors.description)}\r\n                                    helperText={touched.description && errors.description}\r\n                                />\r\n                            </Stack>\r\n                        </Stack>\r\n                        <Box\r\n                            sx={{ mt: 3, display: \"flex\", justifyContent: \"flex-end\", spacing: 3 }}\r\n                        >\r\n                            <LoadingButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                loading={isSubmitting}\r\n                            >\r\n                                Update Account\r\n                            </LoadingButton>\r\n                        </Box>\r\n                    </Form>\r\n                </FormikProvider>\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}","import React from 'react';\r\nimport * as Yup from \"yup\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport {\r\n    Box,\r\n    Stack,\r\n    TextField,\r\n    Dialog,\r\n    DialogContent,\r\n} from \"@material-ui/core\";\r\nimport PropTypes from 'prop-types';\r\nimport { Form, FormikProvider, useFormik } from \"formik\";\r\nimport { LoadingButton } from \"@material-ui/lab\";\r\n\r\n// hooks\r\nimport useAuth from \"../../../../hooks/useAuth\";\r\n\r\n//redux\r\nimport { useDispatch } from \"../../../../redux/store\";\r\nimport { getProfile } from \"../../../../redux/slices/user\"\r\n\r\n//utils\r\nimport { fb_UpdateAccountAdjustmentOfUserByIndex } from \"../../../../utils/firebaseRequest\";\r\n\r\nAccountAdjustmentEditDialog.PropTypes = {\r\n    open: PropTypes.bool,\r\n    onCancel: PropTypes.func,\r\n    data: PropTypes.object,\r\n    onSave: PropTypes.func\r\n}\r\n\r\nexport default function AccountAdjustmentEditDialog({ open, onCancel, data, index, adjustmentId }) {\r\n    const { user } = useAuth();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const dispatch = useDispatch();\r\n    const UserAccountSchema = Yup.object().shape({\r\n        credit_debit: Yup.string().required(\"Credi/Debit is required\"),\r\n        amount: Yup.number().required(\"Account Number is required\"),\r\n        transaction_dt: Yup.string().required(\"Transaction date is required\"),\r\n        description: Yup.string().required(\"Description is required\"),\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            credit_debit: data.credit_debit ? data.credit_debit : \"\",\r\n            amount: data.amount ? data.amount : \"\",\r\n            description: data.description ? data.description : \"\",\r\n            transaction_dt: data.transaction_dt ? data.transaction_dt : \"2020-01-01\"\r\n        },\r\n        validationSchema: UserAccountSchema,\r\n        onSubmit: async (values, { setSubmitting, resetForm }) => {\r\n            try {\r\n                await fb_UpdateAccountAdjustmentOfUserByIndex(user.id, adjustmentId, index, values);\r\n                dispatch(getProfile(user.id));\r\n                setSubmitting(false);\r\n                resetForm();\r\n                enqueueSnackbar(\"Updated account successfully!\", { variant: \"success\" });\r\n                onCancel();\r\n            } catch (error) {\r\n                console.log(error)\r\n                enqueueSnackbar(\"Failed in updating new account\", { variant: \"error\" });\r\n            }\r\n        },\r\n    });\r\n\r\n    const {\r\n        errors,\r\n        touched,\r\n        isSubmitting,\r\n        handleSubmit,\r\n        getFieldProps,\r\n    } = formik;\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onCancel} aria-labelledby=\"form-dialog-title\">\r\n            <DialogContent>\r\n                <FormikProvider value={formik}>\r\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n                        <Stack spacing={{ xs: 2, md: 3 }}>\r\n                            <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n                                <TextField\r\n                                    select\r\n                                    fullWidth\r\n                                    label=\"Credit/Debit\"\r\n                                    placeholder=\"Credit/Debit\"\r\n                                    {...getFieldProps(\"credit_debit\")}\r\n                                    SelectProps={{ native: true }}\r\n                                    error={Boolean(touched.credit_debit && errors.credit_debit)}\r\n                                    helperText={touched.credit_debit && errors.credit_debit}\r\n                                >\r\n                                    <option value=\"\" />\r\n                                    <option value=\"credit\">Credit</option>\r\n                                    <option value=\"debit\">Debit</option>\r\n                                </TextField>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Amount($)\"\r\n                                    placeholder=\"Amount($)\"\r\n                                    {...getFieldProps(\"amount\")}\r\n                                    error={Boolean(touched.amount && errors.amount)}\r\n                                    helperText={touched.amount && errors.amount}\r\n                                />\r\n                            </Stack>\r\n                            <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Description\"\r\n                                    placeholder=\"Description\"\r\n                                    {...getFieldProps(\"description\")}\r\n                                    error={Boolean(touched.description && errors.description)}\r\n                                    helperText={touched.description && errors.description}\r\n                                />\r\n                                <TextField\r\n                                    fullWidth\r\n                                    id=\"date\"\r\n                                    label=\"Transaction Date\"\r\n                                    type=\"date\"\r\n                                    {...getFieldProps(\"transaction_dt\")}\r\n                                    error={Boolean(touched.transaction_dt && errors.transaction_dt)}\r\n                                    helperText={touched.transaction_dt && errors.transaction_dt}\r\n                                />\r\n                            </Stack>\r\n                        </Stack>\r\n                        <Box\r\n                            sx={{ mt: 3, display: \"flex\", justifyContent: \"space-between\", alignItems: 'center' }}\r\n                        >\r\n                            <LoadingButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                loading={isSubmitting}\r\n                            >\r\n                                Update Adjustment\r\n                            </LoadingButton>\r\n                        </Box>\r\n                    </Form>\r\n                </FormikProvider>\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}","import React from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\n// material\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {\r\n    Card,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    CardHeader,\r\n    TableContainer,\r\n    IconButton,\r\n    Tooltip\r\n} from '@material-ui/core';\r\nimport { LoadingButton } from '@material-ui/lab';\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from '../../../../redux/store';\r\nimport { getProfile } from \"../../../../redux/slices/user\"\r\nimport Scrollbar from '../../../Scrollbar';\r\n\r\nimport AccountAdjustmentEditDialog from \"./AccountAdjustmentEditDialog\";\r\n\r\n// hooks\r\nimport useAuth from \"../../../../hooks/useAuth\";\r\n\r\n//utils\r\nimport { fb_DeleteAdjustmentOfUserByIdAndIndex } from \"../../../../utils/firebaseRequest\";\r\n\r\nexport default function AccountAdjustmentTable({ id }) {\r\n    const { user } = useAuth();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const dispatch = useDispatch();\r\n    const { accounts, myProfile } = useSelector((state) => state.user);\r\n\r\n    const adjustments = myProfile.adjustment ? myProfile.adjustment[id] ? myProfile.adjustment[id] : [] : []\r\n    const [state, setState] = React.useState({\r\n        adjustmentOpen: false,\r\n        adjustmentId: '',\r\n        accountId: '',\r\n        open: false,\r\n        editData: false,\r\n        index: null,\r\n        deleteLoading: false\r\n    })\r\n\r\n    const onEdit = (index, id) => {\r\n        setState({ ...state, index, adjustmentId: id, open: true, editData: adjustments[index] })\r\n    }\r\n\r\n    const onDelete = async (index) => {\r\n        setState({ ...state, deleteLoading: true })\r\n        try {\r\n            await fb_DeleteAdjustmentOfUserByIdAndIndex(user.id, id, index);\r\n            dispatch(getProfile(user.id));\r\n            enqueueSnackbar(\"Deleted adjustment successfully!\", { variant: \"success\" });\r\n            setState({ ...state, deleteLoading: false })\r\n        }\r\n        catch (error) {\r\n            enqueueSnackbar(\"Failed in deleting adjustment successfully!\", { variant: \"error\" });\r\n            setState({ ...state, deleteLoading: false })\r\n        }\r\n    }\r\n\r\n    const onCancelEdit = () => {\r\n        setState({ ...state, index: null, open: false, editData: {} })\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <AccountAdjustmentEditDialog open={state.open} index={state.index} adjustmentId={id} onCancel={onCancelEdit} data={state.editData} />\r\n            <CardHeader title=\"Adjustments\" sx={{ mb: 3 }} />\r\n            <Scrollbar>\r\n                <TableContainer sx={{ minWidth: 720 }}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Credit/Debit</TableCell>\r\n                                <TableCell>Notes</TableCell>\r\n                                <TableCell>Amount(USD)</TableCell>\r\n                                <TableCell>Transactio Date</TableCell>\r\n                                <TableCell>Creation Date</TableCell>\r\n                                <TableCell />\r\n                                <TableCell />\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {adjustments.map((row, index) => (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.credit_debit ? row.credit_debit : \"No data\"}</TableCell>\r\n                                    <TableCell>{row.description ? row.description : \"No data\"}</TableCell>\r\n                                    <TableCell>{row.amount ? row.amount : \"No data\"}</TableCell>\r\n                                    <TableCell>{row.transaction_dt ? row.transaction_dt : \"No data\"}</TableCell>\r\n                                    <TableCell>{row.created_dt ? row.created_dt : \"No data\"}</TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        <Tooltip title=\"Edit\">\r\n                                            <IconButton onClick={() => onEdit(index, row.id)}>\r\n                                                <EditIcon width={20} height={20} />\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        <Tooltip title=\"Delete\">\r\n                                            <IconButton onClick={() => onDelete(index)}>\r\n                                                <LoadingButton loading={state.deleteLoading} disabled sx={{ width: 20, height: 20 }}>\r\n                                                    <DeleteIcon width={20} height={20} />\r\n                                                </LoadingButton>\r\n                                            </IconButton>\r\n                                        </Tooltip>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                            {accounts.length == 0 && <TableRow><TableCell></TableCell><TableCell></TableCell><TableCell>No Item</TableCell></TableRow>}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Scrollbar>\r\n        </Card>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport {\r\n    Box,\r\n    Grid,\r\n    Card,\r\n    Stack,\r\n    TextField,\r\n    Typography,\r\n    Switch,\r\n    Container\r\n} from \"@material-ui/core\";\r\nimport * as Yup from \"yup\";\r\nimport { Form, FormikProvider, useFormik } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { LoadingButton } from \"@material-ui/lab\";\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from '../../../../redux/store';\r\nimport { getProfile } from \"../../../../redux/slices/user\";\r\n\r\n//APIs\r\nimport { fb_AddAccountAdjustmentByUserId } from '../../../../utils/firebaseRequest'\r\n\r\n//hooks\r\nimport useAuth from \"../../../../hooks/useAuth\";\r\n\r\nimport AccountAdjustmentTable from \"./AccountAdjustmentTable\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n        position: 'relative',\r\n        alignItems: 'flex-end'\r\n    },\r\n    title: {\r\n        marginLeft: theme.spacing(2),\r\n        flex: 1,\r\n    },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function AccountAdjustmentDialog(props) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const { onClose, open } = props;\r\n    const { user } = useAuth();\r\n    const { enqueueSnackbar } = useSnackbar();\r\n\r\n    const handleCancel = () => {\r\n        onClose();\r\n    };\r\n\r\n    const UserAccountSchema = Yup.object().shape({\r\n        credit_debit: Yup.string().required(\"Credi/Debit is required\"),\r\n        amount: Yup.number().required(\"Account Number is required\"),\r\n        transaction_dt: Yup.string().required(\"Transaction date is required\"),\r\n        description: Yup.string().required(\"Description is required\"),\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            credit_debit: \"\",\r\n            amount: \"\",\r\n            description: \"\",\r\n            transaction_dt: \"2020-01-01\"\r\n        },\r\n        validationSchema: UserAccountSchema,\r\n        onSubmit: async (values, { setSubmitting, resetForm }) => {\r\n            try {\r\n                await fb_AddAccountAdjustmentByUserId(user.id, props.id, values);\r\n                dispatch(getProfile(user.id));\r\n                setSubmitting(false);\r\n                resetForm();\r\n                enqueueSnackbar(\"Added account successfully!\", { variant: \"success\" });\r\n            } catch (error) {\r\n                enqueueSnackbar(\"Failed in addding new account\", { variant: \"error\" });\r\n            }\r\n        },\r\n    });\r\n\r\n    const {\r\n        errors,\r\n        touched,\r\n        isSubmitting,\r\n        handleSubmit,\r\n        getFieldProps,\r\n    } = formik;\r\n\r\n    return (\r\n        <Dialog fullScreen open={open} onClose={handleCancel} TransitionComponent={Transition}>\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar>\r\n                    <Button autoFocus color=\"inherit\" onClick={handleCancel}>\r\n                        Close\r\n                    </Button>\r\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={handleCancel} aria-label=\"close\">\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <DialogContent>\r\n                <Container maxWidth=\"lg\">\r\n                    <FormikProvider value={formik}>\r\n                        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n                            <Card sx={{ p: 3 }}>\r\n                                <Stack spacing={{ xs: 2, md: 3 }}>\r\n                                    <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n                                        <TextField\r\n                                            select\r\n                                            fullWidth\r\n                                            label=\"Credit/Debit\"\r\n                                            placeholder=\"Credit/Debit\"\r\n                                            {...getFieldProps(\"credit_debit\")}\r\n                                            SelectProps={{ native: true }}\r\n                                            error={Boolean(touched.credit_debit && errors.credit_debit)}\r\n                                            helperText={touched.credit_debit && errors.credit_debit}\r\n                                        >\r\n                                            <option value=\"\" />\r\n                                            <option value=\"credit\">Credit</option>\r\n                                            <option value=\"debit\">Debit</option>\r\n                                        </TextField>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            label=\"Amount($)\"\r\n                                            placeholder=\"Amount($)\"\r\n                                            {...getFieldProps(\"amount\")}\r\n                                            error={Boolean(touched.amount && errors.amount)}\r\n                                            helperText={touched.amount && errors.amount}\r\n                                        />\r\n                                    </Stack>\r\n                                    <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            label=\"Description\"\r\n                                            placeholder=\"Description\"\r\n                                            {...getFieldProps(\"description\")}\r\n                                            error={Boolean(touched.description && errors.description)}\r\n                                            helperText={touched.description && errors.description}\r\n                                        />\r\n                                        <TextField\r\n                                            fullWidth\r\n                                            id=\"date\"\r\n                                            label=\"Transaction Date\"\r\n                                            type=\"date\"\r\n                                            {...getFieldProps(\"transaction_dt\")}\r\n                                            error={Boolean(touched.transaction_dt && errors.transaction_dt)}\r\n                                            helperText={touched.transaction_dt && errors.transaction_dt}\r\n                                        />\r\n                                    </Stack>\r\n                                </Stack>\r\n                                <Box\r\n                                    sx={{ mt: 3, display: \"flex\", justifyContent: \"space-between\", alignItems: 'center' }}\r\n                                >\r\n                                    <LoadingButton\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                        loading={isSubmitting}\r\n                                    >\r\n                                        Add Adjustment\r\n                                    </LoadingButton>\r\n                                </Box>\r\n                            </Card>\r\n                        </Form>\r\n                    </FormikProvider>\r\n                    <br />\r\n                    <AccountAdjustmentTable id={props.id} />\r\n                </Container>\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}","import React from \"react\";\r\nimport { Icon } from '@iconify/react';\r\nimport { useSnackbar } from \"notistack\";\r\n// material\r\nimport editFill from '@iconify/icons-eva/edit-2-fill';\r\nimport ReceiptIcon from '@material-ui/icons/Receipt';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {\r\n  Card,\r\n  Table,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  CardHeader,\r\n  TableContainer,\r\n  IconButton,\r\n  Tooltip,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogContentText,\r\n  DialogTitle\r\n} from '@material-ui/core';\r\nimport { LoadingButton } from \"@material-ui/lab\";\r\n\r\n// hooks\r\nimport useAuth from \"../../../../hooks/useAuth\";\r\n\r\n//redux\r\nimport { useSelector, useDispatch } from '../../../../redux/store';\r\nimport { getAccountsOfUser, getProfile } from \"../../../../redux/slices/user\"\r\n\r\nimport Scrollbar from '../../../Scrollbar';\r\n\r\nimport AccountEditDialog from \"./AccountEditDialog\";\r\nimport AccountAdjustmentDialog from \"./AccountAdjustmentDialog\";\r\n\r\nimport { fb_DeleteAccountOfUserByIndex } from \"../../../../utils/firebaseRequest\";\r\n\r\n\r\nexport default function AccountTable() {\r\n  const { user } = useAuth();\r\n  const dispatch = useDispatch();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const { accounts, myProfile } = useSelector((state) => state.user);\r\n  const [state, setState] = React.useState({\r\n    adjustmentOpen: false,\r\n    accountId: '',\r\n    open: false,\r\n    editData: false,\r\n    index: null,\r\n    deleteLoading: false,\r\n    deleteIndex: ''\r\n  })\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const openConfirmModal = (index) => {\r\n    setState({ ...state, deleteIndex: index });\r\n    setOpen(true);\r\n  };\r\n\r\n  const closeConfirmModal = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const onEdit = (index) => {\r\n    setState({ ...state, index, open: true, editData: accounts[index] })\r\n  }\r\n\r\n  const onCancelEdit = () => {\r\n    setState({ ...state, index: null, open: false, editData: {} })\r\n  }\r\n\r\n  const onAdjustment = (id) => {\r\n    setState({ ...state, adjustmentOpen: true, accountId: id })\r\n  }\r\n\r\n  const onClose = () => {\r\n    setState({ ...state, adjustmentOpen: false })\r\n  }\r\n\r\n  const onDelete = async () => {\r\n    closeConfirmModal();\r\n    setState({ ...state, deleteLoading: true })\r\n    try {\r\n      await fb_DeleteAccountOfUserByIndex(user.id, state.deleteIndex);\r\n      dispatch(getAccountsOfUser(user.id));\r\n      dispatch(getProfile(user.id));\r\n      enqueueSnackbar(\"Deleted account successfully!\", { variant: \"success\" });\r\n      setState({ ...state, deleteLoading: false })\r\n    } catch (error) {\r\n      setState({ ...state, deleteLoading: false })\r\n      enqueueSnackbar(\"Failed in deleting account.\", { variant: \"error\" });\r\n    }\r\n  }\r\n\r\n  const getBalance = (row) => {\r\n    let balance = parseInt(row.balance);\r\n    if (myProfile.adjustment) {\r\n      if (myProfile.adjustment[row.id]) {\r\n        let adjustments = myProfile.adjustment[row.id];\r\n        adjustments.map((item) => {\r\n          if (item.credit_debit == \"credit\") {\r\n            balance += parseInt(item.amount);\r\n          } else {\r\n            balance -= parseInt(item.amount);\r\n          }\r\n        })\r\n      }\r\n    }\r\n    return balance;\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <AccountAdjustmentDialog open={state.adjustmentOpen} id={state.accountId} onClose={onClose} />\r\n      <AccountEditDialog open={state.open} index={state.index} onCancel={onCancelEdit} data={state.editData} />\r\n      <CardHeader title=\"Accouts\" sx={{ mb: 3 }} />\r\n      <Scrollbar>\r\n        <TableContainer sx={{ minWidth: 720 }}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Account Number</TableCell>\r\n                <TableCell>Description</TableCell>\r\n                <TableCell>Balance(USD)</TableCell>\r\n                <TableCell />\r\n                <TableCell />\r\n                <TableCell />\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {accounts.map((row, index) => (\r\n                <TableRow key={row.id}>\r\n                  <TableCell>{row.number ? row.number : \"No data\"}</TableCell>\r\n                  <TableCell>{row.description ? row.description : \"No data\"}</TableCell>\r\n                  <TableCell>{getBalance(row)}</TableCell>\r\n                  <TableCell align=\"right\">\r\n                    <Tooltip title=\"Add Adjustment\">\r\n                      <IconButton onClick={() => onAdjustment(row.id)}>\r\n                        <ReceiptIcon width={20} height={20} />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    <Tooltip title=\"Edit\">\r\n                      <IconButton onClick={() => onEdit(index)}>\r\n                        <EditIcon width={20} height={20} />\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    <Tooltip title=\"Delete\">\r\n                      <IconButton onClick={() => openConfirmModal(index)}>\r\n                        <LoadingButton\r\n                          type=\"submit\"\r\n                          sx={{ width: 20, height: 20 }}\r\n                          loading={state.deleteLoading}\r\n                          disabled\r\n                        >\r\n                          <DeleteIcon width={20} height={20} />\r\n                        </LoadingButton>\r\n\r\n                      </IconButton>\r\n                    </Tooltip>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n              {accounts.length == 0 && <TableRow><TableCell></TableCell><TableCell></TableCell><TableCell>No Item</TableCell></TableRow>}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Scrollbar>\r\n      <Dialog\r\n        open={open}\r\n        onClose={closeConfirmModal}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Warning\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            This will delte the account and any orders associated with it\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={closeConfirmModal} color=\"primary\">\r\n            Disagree\r\n          </Button>\r\n          <Button onClick={onDelete} color=\"primary\" autoFocus>\r\n            Agree\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Card>\r\n  );\r\n}\r\n","import * as Yup from \"yup\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Form, FormikProvider, useFormik } from \"formik\";\r\n\r\n// material\r\nimport {\r\n  Box,\r\n  Grid,\r\n  Card,\r\n  Stack,\r\n  TextField,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport { LoadingButton } from \"@material-ui/lab\";\r\n\r\nimport AccountTable from \"./AccountTable\";\r\n\r\n// hooks\r\nimport useAuth from \"../../../../hooks/useAuth\";\r\n\r\n//redux\r\nimport { useDispatch, useSelector } from \"../../../../redux/store\";\r\nimport { getAccountsOfUser } from \"../../../../redux/slices/user\"\r\n\r\n//utils\r\nimport { fb_AddAccountByUserId } from \"../../../../utils/firebaseRequest\";\r\n// ----------------------------------------------------------------------\r\n\r\n\r\nexport default function AccountGeneral() {\r\n  const { accounts, subscription } = useSelector((state) => state.user);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const { user } = useAuth();\r\n  const dispatch = useDispatch();\r\n  const [addFlag, setAddFlag] = React.useState(true);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    if (Object.entries(subscription).length > 0) {\r\n      if (subscription.plan.nickname == \"premium\" && accounts.length < 5) {\r\n        setAddFlag(false);\r\n      } else if (subscription.plan.nickname != \"premium\" && accounts.length < 1) {\r\n        setAddFlag(false);\r\n      } else {\r\n        setAddFlag(true);\r\n      }\r\n    }\r\n  }, [accounts, subscription])\r\n\r\n  const UserAccountSchema = Yup.object().shape({\r\n    number: Yup.number().required(\"Account Number is required\"),\r\n    balance: Yup.number().required(\"Initial Balance is required\"),\r\n    description: Yup.string().required(\"Description is required\"),\r\n  });\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      number: \"\",\r\n      balance: \"\",\r\n      description: \"\"\r\n    },\r\n    validationSchema: UserAccountSchema,\r\n    onSubmit: async (values, { setSubmitting, resetForm }) => {\r\n      try {\r\n        await fb_AddAccountByUserId(user.id, values);\r\n        dispatch(getAccountsOfUser(user.id));\r\n        setSubmitting(false);\r\n        resetForm();\r\n        enqueueSnackbar(\"Added account successfully!\", { variant: \"success\" });\r\n      } catch (error) {\r\n        enqueueSnackbar(\"Failed in addding new account\", { variant: \"error\" });\r\n      }\r\n    },\r\n  });\r\n\r\n  const {\r\n    errors,\r\n    touched,\r\n    isSubmitting,\r\n    handleSubmit,\r\n    getFieldProps,\r\n  } = formik;\r\n\r\n  return (\r\n    <Grid item xs={12}>\r\n      <FormikProvider value={formik}>\r\n        <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n          <Card sx={{ p: 3 }}>\r\n            <Stack spacing={{ xs: 2, md: 3 }}>\r\n              <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Account Number\"\r\n                  placeholder=\"Account Number\"\r\n                  {...getFieldProps(\"number\")}\r\n                  error={Boolean(touched.number && errors.number)}\r\n                  helperText={touched.number && errors.number}\r\n                />\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Initial Balance($)\"\r\n                  placeholder=\"Initial Balance($)\"\r\n                  {...getFieldProps(\"balance\")}\r\n                  error={Boolean(touched.balance && errors.balance)}\r\n                  helperText={touched.balance && errors.balance}\r\n                />\r\n              </Stack>\r\n              <Stack>\r\n                <TextField\r\n                  fullWidth\r\n                  label=\"Description\"\r\n                  placeholder=\"Description\"\r\n                  {...getFieldProps(\"description\")}\r\n                  error={Boolean(touched.description && errors.description)}\r\n                  helperText={touched.description && errors.description}\r\n                />\r\n              </Stack>\r\n            </Stack>\r\n            <Box\r\n              sx={{ mt: 3, display: \"flex\", justifyContent: \"space-between\", alignItems: 'center' }}\r\n            >\r\n              <div>{addFlag && <Typography color={'red'}>{`Reached out a max number of accounts.`}</Typography>}</div>\r\n              <LoadingButton\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                loading={isSubmitting}\r\n                disabled={addFlag}\r\n              >\r\n                Add Account\r\n              </LoadingButton>\r\n            </Box>\r\n          </Card>\r\n        </Form>\r\n      </FormikProvider>\r\n      <br />\r\n      <AccountTable />\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Icon } from '@iconify/react';\r\n// material\r\nimport {\r\n    Card,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    CardHeader,\r\n    TableContainer,\r\n    IconButton\r\n} from '@material-ui/core';\r\n\r\nimport deleteFill from '@iconify/icons-eva/folder-remove-fill';\r\nimport Scrollbar from '../../../Scrollbar';\r\n\r\nexport default function AccountImportsTable() {\r\n\r\n    return (\r\n        <Card>\r\n            <CardHeader title=\"Past Imports\" sx={{ mb: 3 }} />\r\n            <Scrollbar>\r\n                <TableContainer sx={{ minWidth: 720 }}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Date</TableCell>\r\n                                <TableCell>Time</TableCell>\r\n                                <TableCell />\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {([\"1\", \"2\", \"3\"]).map((row, index) => (\r\n                                <TableRow key={index}>\r\n                                    <TableCell>Sat Jul 10 2021</TableCell>\r\n                                    <TableCell>11:20:53 GMT-0700</TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        <IconButton onClick={() => alert(\"deleting\")}>\r\n                                            <Icon icon={deleteFill} width={20} height={20} />\r\n                                        </IconButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Scrollbar>\r\n        </Card>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\n// material\r\nimport {\r\n  Grid,\r\n  Card,\r\n  Button,\r\n  Typography,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  DialogContentText,\r\n} from \"@material-ui/core\";\r\n\r\nimport AccountImportsTable from \"./AccountImportsTable\";\r\n\r\nimport { DateRangePicker } from 'react-date-range';\r\n\r\nimport 'react-date-range/dist/styles.css'; // main style file\r\nimport 'react-date-range/dist/theme/default.css'; // theme css file\r\n\r\nexport default function Account() {\r\n\r\n  const [confirmDialog, setConfirmDialog] = React.useState(false);\r\n\r\n  const handleSelect = (ranges) => {\r\n    alert(\"start date:\" + ranges.selection.startDate + \"end date:\" + ranges.selection.endDate)\r\n  }\r\n\r\n  const selectionRange = {\r\n    startDate: new Date(),\r\n    endDate: new Date(),\r\n    key: 'selection',\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12} md={6}>\r\n        <AccountImportsTable />\r\n      </Grid>\r\n      <Grid item xs={12} md={6}>\r\n        <Card sx={{ p: 3 }}>\r\n          <Typography >Delete Orders</Typography>\r\n          <br />\r\n          <Grid container spacing={3} alignItems=\"center\">\r\n            <Grid item xs={12} sx={{ justifyContent: 'center', display: 'flex' }}>\r\n              <DateRangePicker\r\n                color=\"red\"\r\n                style={{ borderRadius: 5 }}\r\n                ranges={[selectionRange]}\r\n                onChange={handleSelect}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sx={{ justifyContent: 'flex-end', display: 'flex' }}>\r\n              <Button\r\n                onClick={() => setConfirmDialog(true)}\r\n                variant=\"contained\"\r\n              >\r\n                Delete\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Card>\r\n        <br />\r\n        <Card sx={{ p: 3 }}>\r\n          <Typography color=\"text.secondary\" >Last Trade Date and Time</Typography>\r\n          <Typography >Sat Jul 10 2021 11:20:53 GMT-0700</Typography>\r\n        </Card>\r\n      </Grid>\r\n      <Dialog\r\n        open={confirmDialog}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">\r\n          Warning\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\" color=\"text.primary\">\r\n            Cannot be recovered.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setConfirmDialog(false)} color=\"primary\">\r\n            Disagree\r\n          </Button>\r\n          <Button\r\n            onClick={() => setConfirmDialog(false)}\r\n            color=\"primary\"\r\n            autoFocus\r\n          >\r\n            Agree\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport * as Yup from \"yup\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport {\r\n    Box,\r\n    Stack,\r\n    TextField,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport PropTypes from 'prop-types';\r\nimport { Form, FormikProvider, useFormik } from \"formik\";\r\nimport { LoadingButton } from \"@material-ui/lab\";\r\n\r\n// hooks\r\nimport useAuth from \"../../../../hooks/useAuth\";\r\n\r\n//redux\r\nimport { useDispatch, useSelector } from \"../../../../redux/store\";\r\nimport { getAPIsOfUser } from \"../../../../redux/slices/user\"\r\n\r\n//utils\r\nimport { fb_UpdateAPIsOfUserById } from \"../../../../utils/firebaseRequest\";\r\n\r\nAccountAPIEditDialog.PropTypes = {\r\n    open: PropTypes.bool,\r\n    onCancel: PropTypes.func,\r\n    data: PropTypes.object,\r\n    onSave: PropTypes.func\r\n}\r\n\r\nexport default function AccountAPIEditDialog({ open, onCancel, data, index }) {\r\n    const { user } = useAuth();\r\n    const { accounts } = useSelector((state) => state.user);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const dispatch = useDispatch();\r\n\r\n    const UserAccountSchema = Yup.object().shape({\r\n        account: Yup.string().required(\"Account is required\"),\r\n        model: Yup.string().required(\"Model is required\"),\r\n        key: Yup.string().required(\"API key is required\"),\r\n        name: Yup.string().required(\"API name is required\")\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            account: data.account,\r\n            model: data.model,\r\n            key: data.key,\r\n            name: data.name\r\n        },\r\n\r\n        validationSchema: UserAccountSchema,\r\n        onSubmit: async (values, { setSubmitting, resetForm }) => {\r\n            try {\r\n                data = {\r\n                    ...data,\r\n                    account: values.account,\r\n                    model: values.model,\r\n                    key: values.key,\r\n                    name: values.name,\r\n                }\r\n                await fb_UpdateAPIsOfUserById(user.id, data);\r\n                dispatch(getAPIsOfUser(user.id));\r\n                resetForm();\r\n                setSubmitting(false);\r\n                onCancel()\r\n                enqueueSnackbar(\"Updated API successfully!\", { variant: \"success\" });\r\n            } catch (error) {\r\n                console.log(error)\r\n                enqueueSnackbar(\"Failed in update API\", { variant: \"error\" });\r\n            }\r\n        },\r\n    });\r\n\r\n    const {\r\n        errors,\r\n        touched,\r\n        isSubmitting,\r\n        handleSubmit,\r\n        getFieldProps,\r\n    } = formik;\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onCancel} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">Update API</DialogTitle>\r\n            <DialogContent>\r\n                <FormikProvider value={formik}>\r\n                    <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n                        <Stack spacing={{ xs: 2, md: 3 }}>\r\n                            <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n                                <TextField\r\n                                    select\r\n                                    fullWidth\r\n                                    label=\"Account\"\r\n                                    placeholder=\"Account\"\r\n                                    SelectProps={{ native: true }}\r\n                                    {...getFieldProps(\"account\")}\r\n                                    error={Boolean(touched.account && errors.account)}\r\n                                    helperText={touched.account && errors.account}\r\n                                >\r\n                                    <option value=\"\" />\r\n                                    {accounts.map(data =>\r\n                                        <option value={data.number}>{data.description}</option>\r\n                                    )}\r\n                                </TextField>\r\n                                <TextField\r\n                                    select\r\n                                    fullWidth\r\n                                    label=\"Model\"\r\n                                    placeholder=\"Model\"\r\n                                    SelectProps={{ native: true }}\r\n                                    {...getFieldProps(\"model\")}\r\n                                    error={Boolean(touched.model && errors.model)}\r\n                                    helperText={touched.model && errors.model}\r\n                                >\r\n                                    <option value=\"\" />\r\n                                    <option value=\"Model 1\">Model 1</option>\r\n                                    <option value=\"Model 2\">Model 2</option>\r\n                                    <option value=\"Model 3\">Model 3</option>\r\n                                    <option value=\"Model 4\">Model 4</option>\r\n                                </TextField>\r\n                            </Stack>\r\n                            <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"API Key\"\r\n                                    placeholder=\"API Key\"\r\n                                    {...getFieldProps(\"key\")}\r\n                                    error={Boolean(touched.key && errors.key)}\r\n                                    helperText={touched.key && errors.key}\r\n                                />\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Name\"\r\n                                    placeholder=\"Name\"\r\n                                    {...getFieldProps(\"name\")}\r\n                                    error={Boolean(touched.name && errors.name)}\r\n                                    helperText={touched.name && errors.name}\r\n                                />\r\n                            </Stack>\r\n                        </Stack>\r\n                        <Box\r\n                            sx={{ mt: 3, display: \"flex\", justifyContent: \"flex-end\" }}\r\n                        >\r\n                            <LoadingButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                loading={isSubmitting}\r\n                            >\r\n                                Update API\r\n                            </LoadingButton>\r\n                        </Box>\r\n                    </Form>\r\n                </FormikProvider>\r\n            </DialogContent>\r\n        </Dialog>\r\n    );\r\n}","import React from \"react\";\r\nimport { Icon } from '@iconify/react';\r\n// material\r\nimport editFill from '@iconify/icons-eva/edit-2-fill';\r\nimport {\r\n    Card,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    CardHeader,\r\n    TableContainer,\r\n    IconButton\r\n} from '@material-ui/core';\r\n\r\n//redux\r\nimport { useSelector } from '../../../../redux/store';\r\n\r\nimport Scrollbar from '../../../Scrollbar';\r\n\r\nimport AccountAPIEditDialog from \"./AccountAPIEditDialog\";\r\n\r\nexport default function AccountAPIsTable() {\r\n    const { api } = useSelector((state) => state.user);\r\n    const [state, setState] = React.useState({\r\n        open: false,\r\n        editData: false,\r\n        index: null\r\n    })\r\n\r\n    const onEdit = (index) => {\r\n        setState({ ...state, index, open: true, editData: api[index] })\r\n    }\r\n\r\n    const onCancelEdit = () => {\r\n        setState({ ...state, index: null, open: false, editData: {} })\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <AccountAPIEditDialog open={state.open} index={state.index} onCancel={onCancelEdit} data={state.editData} />\r\n            <CardHeader title=\"Accouts\" sx={{ mb: 3 }} />\r\n            <Scrollbar>\r\n                <TableContainer sx={{ minWidth: 720 }}>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Model</TableCell>\r\n                                <TableCell>API Key</TableCell>\r\n                                <TableCell>Name</TableCell>\r\n                                <TableCell />\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {api.map((row, index) => (\r\n                                <TableRow key={row.id}>\r\n                                    <TableCell>{row.model ? row.model : \"No data\"}</TableCell>\r\n                                    <TableCell>{row.key ? row.key : \"No data\"}</TableCell>\r\n                                    <TableCell>{row.name ? row.name : \"No data\"}</TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        <IconButton onClick={() => onEdit(index)}>\r\n                                            <Icon icon={editFill} width={20} height={20} />\r\n                                        </IconButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                            {api.length == 0 && <TableRow><TableCell></TableCell><TableCell>No Item</TableCell><TableCell>No Item</TableCell></TableRow>}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Scrollbar>\r\n        </Card>\r\n    );\r\n}\r\n","import * as Yup from \"yup\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport React from \"react\";\r\nimport { Form, FormikProvider, useFormik } from \"formik\";\r\n\r\n// material\r\nimport {\r\n    Box,\r\n    Grid,\r\n    Card,\r\n    Stack,\r\n    TextField,\r\n} from \"@material-ui/core\";\r\nimport { LoadingButton } from \"@material-ui/lab\";\r\n\r\nimport AccountAPIsTable from \"./AccountAPIsTable\";\r\n\r\n// hooks\r\nimport useAuth from \"../../../../hooks/useAuth\";\r\n\r\n//redux\r\nimport { useDispatch, useSelector } from \"../../../../redux/store\";\r\nimport { getAPIsOfUser } from \"../../../../redux/slices/user\"\r\n\r\n//utils\r\nimport { fb_AddAPIByUserId } from \"../../../../utils/firebaseRequest\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AccountGeneral() {\r\n    const { accounts } = useSelector((state) => state.user);\r\n    const { enqueueSnackbar } = useSnackbar();\r\n    const { user } = useAuth();\r\n    const dispatch = useDispatch();\r\n\r\n    const UserAccountSchema = Yup.object().shape({\r\n        account: Yup.string().required(\"Account is required\"),\r\n        model: Yup.string().required(\"Model is required\"),\r\n        key: Yup.string().required(\"API key is required\"),\r\n        name: Yup.string().required(\"API name is required\")\r\n    });\r\n\r\n    const formik = useFormik({\r\n        enableReinitialize: true,\r\n        initialValues: {\r\n            account: \"\",\r\n            model: \"\",\r\n            key: \"\",\r\n            name: \"\"\r\n        },\r\n\r\n        validationSchema: UserAccountSchema,\r\n        onSubmit: async (values, { setSubmitting, resetForm }) => {\r\n            try {\r\n                await fb_AddAPIByUserId(user.id, values);\r\n                dispatch(getAPIsOfUser(user.id));\r\n                setSubmitting(false);\r\n                resetForm();\r\n                enqueueSnackbar(\"Added Adjustment successfully!\", { variant: \"success\" });\r\n            } catch (error) {\r\n                enqueueSnackbar(\"Failed in addding new API\", { variant: \"error\" });\r\n            }\r\n        },\r\n    });\r\n\r\n    const {\r\n        errors,\r\n        touched,\r\n        isSubmitting,\r\n        handleSubmit,\r\n        getFieldProps,\r\n    } = formik;\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            <FormikProvider value={formik}>\r\n                <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n                    <Card sx={{ p: 3 }}>\r\n                        <Stack spacing={{ xs: 2, md: 3 }}>\r\n                            <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n                                <TextField\r\n                                    select\r\n                                    fullWidth\r\n                                    label=\"Account\"\r\n                                    placeholder=\"Account\"\r\n                                    SelectProps={{ native: true }}\r\n                                    {...getFieldProps(\"account\")}\r\n                                    error={Boolean(touched.account && errors.account)}\r\n                                    helperText={touched.account && errors.account}\r\n                                >\r\n                                    <option value=\"\" />\r\n                                    {accounts.map(data =>\r\n                                        <option value={data.number}>{data.description}</option>\r\n                                    )}\r\n                                </TextField>\r\n                                <TextField\r\n                                    select\r\n                                    fullWidth\r\n                                    label=\"Model\"\r\n                                    placeholder=\"Model\"\r\n                                    SelectProps={{ native: true }}\r\n                                    {...getFieldProps(\"model\")}\r\n                                    error={Boolean(touched.model && errors.model)}\r\n                                    helperText={touched.model && errors.model}\r\n                                >\r\n                                    <option value=\"\" />\r\n                                    <option value=\"Model 1\">Model 1</option>\r\n                                    <option value=\"Model 2\">Model 2</option>\r\n                                    <option value=\"Model 3\">Model 3</option>\r\n                                    <option value=\"Model 4\">Model 4</option>\r\n                                </TextField>\r\n                            </Stack>\r\n                            <Stack direction={{ xs: \"column\", md: \"row\" }} spacing={2}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"API Key\"\r\n                                    placeholder=\"API Key\"\r\n                                    {...getFieldProps(\"key\")}\r\n                                    error={Boolean(touched.key && errors.key)}\r\n                                    helperText={touched.key && errors.key}\r\n                                />\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Name\"\r\n                                    placeholder=\"Name\"\r\n                                    {...getFieldProps(\"name\")}\r\n                                    error={Boolean(touched.name && errors.name)}\r\n                                    helperText={touched.name && errors.name}\r\n                                />\r\n                            </Stack>\r\n                        </Stack>\r\n                        <Box\r\n                            sx={{ mt: 3, display: \"flex\", justifyContent: \"flex-end\" }}\r\n                        >\r\n                            <LoadingButton\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                loading={isSubmitting}\r\n                            >\r\n                                Add API\r\n                            </LoadingButton>\r\n                        </Box>\r\n                    </Card>\r\n                </Form>\r\n            </FormikProvider>\r\n            <br />\r\n            <AccountAPIsTable />\r\n        </Grid>\r\n    );\r\n}\r\n","import { Icon } from \"@iconify/react\";\r\nimport { capitalCase } from \"change-case\";\r\nimport { useState, useEffect } from \"react\";\r\nimport bellFill from \"@iconify/icons-eva/bell-fill\";\r\nimport shareFill from \"@iconify/icons-eva/share-fill\";\r\nimport roundVpnKey from \"@iconify/icons-ic/round-vpn-key\";\r\nimport roundReceipt from \"@iconify/icons-ic/round-receipt\";\r\nimport roundAccountBox from \"@iconify/icons-ic/round-account-box\";\r\n// material\r\nimport { Container, Tab, Box, Tabs, Stack } from \"@material-ui/core\";\r\n// redux\r\nimport { useDispatch } from \"../../redux/store\";\r\nimport {\r\n  getAccountsOfUser,\r\n  getSubscription,\r\n  getAPIsOfUser,\r\n  getProfile\r\n} from \"../../redux/slices/user\";\r\n// routes\r\nimport { PATH_DASHBOARD } from \"../../routes/paths\";\r\n//hooks\r\nimport useAuth from \"../../hooks/useAuth\";\r\n\r\n// components\r\nimport Page from \"../../components/Page\";\r\nimport HeaderBreadcrumbs from \"../../components/HeaderBreadcrumbs\";\r\nimport { AccountGeneral, AccountTrades, AccountAPI, AccountMisc } from \"../../components/_dashboard/user/setting\";\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function UserSetting() {\r\n\r\n  const [currentTab, setCurrentTab] = useState(\"account\");\r\n  const dispatch = useDispatch();\r\n  const { user } = useAuth();\r\n\r\n  useEffect(() => {\r\n    dispatch(getAccountsOfUser(user.id))\r\n    dispatch(getSubscription(user.id))\r\n    dispatch(getAPIsOfUser(user.id));\r\n    dispatch(getProfile(user.id));\r\n  }, [dispatch]);\r\n\r\n  const ACCOUNT_TABS = [\r\n    {\r\n      value: \"account\",\r\n      icon: <Icon icon={roundAccountBox} width={20} height={20} />,\r\n      component: <AccountGeneral />,\r\n    },\r\n    {\r\n      value: \"trades\",\r\n      icon: <Icon icon={roundReceipt} width={20} height={20} />,\r\n      component: <AccountTrades />,\r\n    },\r\n    {\r\n      value: \"API\",\r\n      icon: <Icon icon={roundVpnKey} width={20} height={20} />,\r\n      component: <AccountAPI />,\r\n    },\r\n    {\r\n      value: \"Misc\",\r\n      icon: <Icon icon={shareFill} width={20} height={20} />,\r\n      component: <AccountMisc />,\r\n    }\r\n  ];\r\n\r\n  const handleChangeTab = (event, newValue) => {\r\n    setCurrentTab(newValue);\r\n  };\r\n\r\n  return (\r\n    <Page title=\"User: Account Settings | Minimal-UI\">\r\n      <Container>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Account\"\r\n          links={[\r\n            { name: \"Dashboard\", href: PATH_DASHBOARD.root },\r\n            { name: \"User\", href: PATH_DASHBOARD.user.root },\r\n            { name: \"Settings\" },\r\n          ]}\r\n        />\r\n        <Stack spacing={5}>\r\n          <Tabs\r\n            value={currentTab}\r\n            scrollButtons=\"auto\"\r\n            variant=\"scrollable\"\r\n            allowScrollButtonsMobile\r\n            onChange={handleChangeTab}\r\n          >\r\n            {ACCOUNT_TABS.map((tab) => (\r\n              <Tab\r\n                disableRipple\r\n                key={tab.value}\r\n                label={capitalCase(tab.value)}\r\n                icon={tab.icon}\r\n                value={tab.value}\r\n              />\r\n            ))}\r\n          </Tabs>\r\n\r\n          {ACCOUNT_TABS.map((tab) => {\r\n            const isMatched = tab.value === currentTab;\r\n            return isMatched && <Box key={tab.value}>{tab.component}</Box>;\r\n          })}\r\n        </Stack>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"],"sourceRoot":""}